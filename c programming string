                                                                                  String related problems 
                                                                                     (Total 15 questions)



1.Write a program in C to find the length of a string without using any library function. 

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main ()
{
    int count=0,i=0;
    char s1[50];
    
    printf("Enter the neme : ");
    gets(s1);

    while(s1[i]!='\0')
    {
       count++;
       i++;
    }
    printf("%d",count);

    return 0;
}


2.Write a program in C to concatenate two strings without using any library function.


#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main ()
{
    int len1,len2,i;
    char s1[50];
    char s2[50];

    printf("Enter the neme : ");
    gets(s1);
    printf("Enter the neme : ");
    gets(s2);
    
    len1 = strlen(s1);
    len2 = strlen(s2);

    for(i=0;i<=len2;i++)
    {
        s1[len1+i]=s2[i];
    }
    printf("%s",s1);

    return 0;
}


3.Write a program in C to count how many vowels are there in a string.


#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int count=0,i,len;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    len = strlen(s1);
    for(i=0;i<len;i++)
    {
        if(s1[i]=='a' || s1[i]=='e' || s1[i]=='i' || s1[i]=='o' || s1[i]=='u' 
        || s1[i]=='A' || s1[i]=='E' || s1[i]=='I' || s1[i]=='O' || s1[i]=='U')
        {
            count++;   
        }
    }
    printf("%d",count);
    return 0;
}




4.Write a program in C to count the number of words in a string.

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int words=0,i,len;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    len = strlen(s1);
    for(i=0;i<len;i++)
    {
        if(s1[i]==' ')
        {
            words++;   
        }
    }
    words++;
    printf("%d",words);
    return 0;
}



5.Write a program in C to find the reverse of a string. 

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i,len;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    len = strlen(s1);
    for(i=len-1;i>='\0';i--)
    {
       printf("%c",s1[i]);
    }
    
    return 0;
}



6.Write a program in C to convert lowercase string to uppercase. 

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    for(i=0;s1[i]!='\0';i++)
    {
        if(s1[i]>='a' && s1[i]<='z')
        {
            s1[i]=s1[i]-32; 
        }   
    }
     printf("%s",s1);
    return 0;
}



7.Write a program in C to toggle the case of each character in a string.

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    for(i=0;s1[i]!='\0';i++)
    {
        if(s1[i]>='a' && s1[i]<='z' )
        {
            s1[i]=s1[i]-32;
        }
         else if (s1[i]>='A' && s1[i]<='Z')
        {
            s1[i]=s1[i]+32; 
        }    
    }
     printf("%s",s1);
    return 0;
}



8.Write a program in C to sort a string array in alphabetic order.

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i,j,temp=0,len;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);
    
    len = strlen(s1);
    
    for(i=0;i<len;i++)
    {
        for(j=i+1;j<len;j++)
        {
            if(s1[i]>s1[j])
            {
                temp = s1[i];
                s1[i] = s1[j];
                s1[j] = temp;
            }
        }    
    }
     printf("%s",s1);
    return 0;
}


9.Write a program in C to count the occurrences of a character in a string regardless of its case.

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i,count=0;
    char s1[100];
    char letter;
    printf("Enter the name : ");
    gets(s1);
    printf("Enter the letter : ");
    scanf("%c",&letter);
    i=0;
    while(s1[i]!='\0')
    {
        if(s1[i]==letter || s1[i]-32==letter || s1[i]+32==letter)
        {
            count++;
        }
        i++;
    }
    printf("%d",count);
    
    return 0;
}


10.Write a program in C to check whether a string is a palindrome or not. 

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    int i,flag=0,len;
    char s1[100];
    printf("Enter the name : ");
    gets(s1);

    len = strlen(s1);

    for(i=0;i<len;i++)
    {
        if(s1[i]!=s1[len-i-1])
        {
            flag=1;
            break;
        }
        if(s1[i]==s1[len-i-1])
        {
            flag=0;
        }
    }
    if(flag==1)
    {
        printf("No");
    }
     if(flag==0)
    {
        printf("Yes");
    }
    return 0;
}



11.Write a program in C to add the digits in a string.

#include<stdio.h>
#include<string.h>
int main ()
{
    char str[50];
    int i,sum=0;

    printf("Enter the string : ");
    gets(str);

    for(i=0;str[i]!='\0';i++)
    {
        if(str[i]>='0' && str[i]<='9')
        {
            sum=sum+(str[i]-'0');
        }
    }
    printf("%d",sum);

    return 0;
}



12.Write a program in C to count occurrences of a word in a string.

#include<stdio.h>
#include<string.h>
int main ()
{
    char str1[100];
    char str2[100];
    int found,count,i,j;
    int len1,len2;

    printf("Enter the string : ");
    gets(str1);
    printf("Enter the word : ");
    gets(str2);

    len1=strlen(str1);
    len2=strlen(str2);
    count=0;
    for(i=0;i<=len1-len2;i++)
    {
        found=1;
        for(j=0;j<len2;j++)
        {
            if(str1[i+j]!=str2[j])
            {
                found=0;
                break;
            }
        }
        if(found==1)
        {
            count++;
        }
    }
   printf("Total occurrences of '%s': %d", str2, count);
    return 0;
}







13.Write a program in C to remove all repeated characters in a string. 


                  ## Remove duplicates 

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100];
    int i, j, k,len;
 
    printf("\n Please Enter any String :  ");
    gets(str);
     len = strlen(str); 
    for(i = 0; i < len; i++)
    {
        for(j = i + 1; str[j] != '\0'; j++)
        {
            if(str[i] == str[j])              {
                for(k = j; str[k] != '\0'; k++) 
                {
                    str[k] = str[k + 1];
                }
                
            }
        }
    }
    
    printf("\n The Final String after Removing All Duplicates = %s ", str);
    
    return 0;
}




14.Write a program in C to find the maximum occurring character in a string.

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100];
    int i, len;
    int max = 0;
    
    int freq[256] = {0}; 
 
    printf("\n Please Enter any String :  ");
    gets(str);
    
    len = strlen(str);
    
    for(i = 0; i < len; i++)
    {
        freq[str[i]]++;
    }
        
    for(i = 0; i < 256; i++)
    {
        if(freq[i] > freq[max])
        {
            max = i;
        }
    }
    printf("\n The Maximum Occurring Character '%c'  ", max);
    
    return 0;
}


15.Write a program in C to reverse the words in a string.

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100];
    int i, j, len, startIndex, endIndex;
 
    printf("\n Please Enter any String :  ");
    gets(str);
    
    len = strlen(str);
    endIndex = len - 1;
    
            
    for(i = len - 1; i >= 0; i--)
    {
        if(str[i] == ' ' || str[i]== 0 )
        {
            if(i == 0)
            {
                startIndex = 0;
            }
            else
            {
                startIndex = i + 1;
            }
            for(j = startIndex; j <= endIndex; j++)
            {
                printf("%c", str[j]);
            }
            endIndex = i - 1;
            printf(" ");                
        } 
    }
    
    return 0;
}


##Replace the string

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100], ch, Newch;
    int i;
 
    printf("\n Please Enter any String :  ");
    gets(str);

    
    printf("\n Please Enter the Character which you change :  ");
    scanf("%c", &ch);
    
    getchar();
    
    printf("\n Please Enter the New Character :  ");
    scanf("%c", &Newch);
    
    for(i = 0; i <strlen(str); i++)
    {
        
        if(str[i] == ch)  
        {
            str[i] = Newch;
        }
         
    }
    
    printf("\n The Final String after Replacing All Occurrences of  %s ", str);
    
    return 0;
}


      ##  Remove the string

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100], ch;
    int i, len, j;
 
    printf("\n Please Enter any String :  ");
    gets(str);
    
    printf("\n Please Enter the Character that you want to Remove :  ");
    scanf("%c", &ch);
    
    len = strlen(str);
        
    for(i = 0; i < len; i++)
    {
        if(str[i] == ch)
        {
            for(j = i; j < len; j++)
            {
                str[j] = str[j + 1];
            }
                
        } 
    }   
    printf("\n The Final String after Removing All Occurrences of  %s ",str);
    
    return 0;
}


## Maximum occurring

#include <stdio.h>
#include <string.h>
 
int main()
{
    char str[100];
    int i, len;
    int max = 0;
    
    int freq[256] = {0}; 
 
    printf("\n Please Enter any String :  ");
    gets(str);
    
    len = strlen(str);
    
    for(i = 0; i < len; i++)
    {
        freq[str[i]]++;
    }
        
    for(i = 0; i < 256; i++)
    {
        if(freq[i] > freq[max])
        {
            max = i;
        }
    }
    printf("\n The Maximum Occurring Character '%c'  ", max);
    
    return 0;
}









 lexicographically string â€¦..Maximum string size

#include<stdio.h>
#include<string.h>
int main()
{
    char str1[100],str2[100];
    int len1,len2,i;

    printf("Enter the string : ");
    gets(str1);
    printf("Enter the string : ");
    gets(str2);

    
    len1 = strlen(str1);
    len2 = strlen(str2);
    
    for(i=0;str1[i]==str2[i];i++)
    {
    if(str1[i]=='\0' && str2[i]=='\0')
    {
        break;
    }
    }
    if(len1>len2)
    {
        printf("First string is lexicographically greater than second.");
    }
    else if(len1<len2)
    {
        printf("First string is lexicographically smaller than second.");
    }
    else if(len1==len2)
    {
        printf("Both strings are equal.");
    }

    return 0;
}






                                       Function Problem

// A function to check if a string str is palindrome or notâ€¦â€¦â€¦


#include <stdio.h>
#include <string.h>
 
void isPalindrome(char str[])
{
    int len,flag=0,i;
        len = strlen(str);

    for(i=0;i<len;i++)
    {
        if(str[i]!=str[len-i-1])
        {
            flag=1;
            break;
        }
        if(str[i]==str[len-i-1])
        {
            flag=0;
        }
    }
    if(flag==1)
    {
        printf("%s is not a palindrome\n", str);
    }
     if(flag==0)
    {
        printf("%s is a palindrome\n", str);
    }

}
 
// Driver program to test above function
int main()
{
    isPalindrome("abba");
    isPalindrome("abbccbba");
    isPalindrome("geeks");
    return 0;
}


















